import re
import sys
import os.path
import ifcopenshell
import itertools
import json
import csv

def chunks2(iterable,size,filler=None):
    it = itertools.chain(iterable,itertools.repeat(filler,size-1))
    chunk = tuple(itertools.islice(it,size))
    while len(chunk) == size:
        yield chunk
        chunk = tuple(itertools.islice(it,size))

class IfcTypeDict(dict):
    def __missing__(self, key):
        value = self[key] = ifcopenshell.create_entity(key).wrapped_data.get_attribute_names()
        return value

typeDict = IfcTypeDict()


need_classes = ["IfcSite","IfcBuilding","IfcBuildingStorey","IfcFlowSegment","IfcRelAggregates","IfcRelContainedInSpatialStructure"]



nodes = []
edges = []
#wallid = None

ourLabel = 'w2' #sys.argv[2]

f = ifcopenshell.open('C:\\Users\\Administrator\\Desktop\\python\\test2.ifc')
for el in f:
  tid = el.id()
  cls = el.is_a()
  pairs = []
  keys = []
  if cls in need_classes:
    try:
      keys = [x for x in el.get_info() if x not in ["type", "id"]]
    except RuntimeError:
     # we actually can't catch this, but try anyway
      pass
    for key in keys:
      val = el[key]
      if any(hasattr(val,"is_a") and val.is_a(thisTyp) for thisTyp in ["IfcBoolean", "IfcLabel", "IfcText", "IfcReal","IfcAreaMeasure","IfcCountMeasure","IfcLengthMeasure"]):
        val = val.wrappedValue
      if type(val) not in (str, bool, float):
        continue
      pairs.append((key, val))
  
    nodes.append((tid, cls, pairs))
    for i in range(len(el)): 
      try:
        el[i]
      except RuntimeError as e:
        if str(e) != "Entity not found":
          print("ID", tid, e, file=sys.stderr)
          continue
      if isinstance(el[i], ifcopenshell.entity_instance):
        #if el[i].id() != 0 & el[i].cls() in need_classes:
        if el[i].id() != []:
          edges.append((tid, el[i].id(), typeDict[cls][i]))
          continue
        else:
          print("attribute " + typeDict[cls][i] + " of " + str(tid) + " is zero", file=sys.stderr)
      try:
        iter(el[i])
      except TypeError:
        continue
      destinations = [x.id() for x in el[i] if isinstance(x, ifcopenshell.entity_instance)]
      for connectedTo in destinations:
        edges.append((tid, connectedTo, typeDict[cls][i]))
if len(nodes) == 0:
    print("no nodes in file", file=sys.stderr)
    sys.exit(1)

indexes = set(["nid", "cls"])
data=open("C:\\Users\\Administrator\\Desktop\\python\\store3.txt",'w+') 

ids=[]
dicts={}
for chunk in chunks2(nodes, 100):
  idx = 0
  print("CREATE ", end="",file=data)
  for i in chunk:
    if i is None: continue
    nId, cls, pairs = i
    if idx != 0: 
      print(",",end="",file=data)
    idx = idx + 1
    ids.append(nId)
    dicts.update({nId:cls})

    pairsStr = ""
  
    for k,v in pairs:
      indexes.add(k)

      pairsStr += ", " + k + ": " + json.dumps(v)

    print("(a" + str(idx) + ":" + cls + " { nid: " + str(nId) + ",cls: '" + cls + "'" + pairsStr + " })", end="",file=data)
  print(";",file=data)

for idxName in indexes:
  print("CREATE INDEX on :" + ourLabel + "(" + idxName + ");",file=data)


def get_value1(dcits, key):
    return dcits[key] if key in dicts else 'Key Not Exist!'
    
for (nId1, nId2, relType) in edges:
   if nId1 in ids and nId2 in ids:
      n1 = get_value1(dicts, nId1)
      n2 = get_value1(dicts, nId2)
    
      print (" MATCH (a", nId1 , ":", n1 , ") ,(b", nId2 , ":", n2 , ") WHERE a", nId1 , ".nid = ", nId1 , " AND b", nId2 , ".nid = ", nId2 , sep='', file=data)
for ( nId1 , nId2 , relType ) in edges :
  if nId1 in ids and nId2 in ids:
      print (" CREATE (a", nId1 , ") -[:", relType , "] - >(b", nId2 , ")", sep='' , file=data)
 
data.close()
  
